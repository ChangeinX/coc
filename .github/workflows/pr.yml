name: CI

on:
  pull_request:

# Token scopes needed by enable-pull-request-automerge
permissions:
  contents: write
  pull-requests: write
  actions: write

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      lambdas_refresh_worker: ${{ steps.filter.outputs.lambdas_refresh_worker }}
      frontend_app: ${{ steps.filter.outputs.frontend_app }}
      frontend_mobile: ${{ steps.filter.outputs.frontend_mobile }}
      java_auth_common: ${{ steps.filter.outputs.java_auth_common }}
      messages_java: ${{ steps.filter.outputs.messages_java }}
      user_service: ${{ steps.filter.outputs.user_service }}
      notifications: ${{ steps.filter.outputs.notifications }}
      recruiting: ${{ steps.filter.outputs.recruiting }}
      clash_data: ${{ steps.filter.outputs.clash_data }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            python:
              - 'coclib/**'
              - 'db/**'
              - 'migrations/**'
              - 'noxfile.py'
            lambdas_refresh_worker:
              - 'lambdas/refresh-worker/**'
            frontend_app:
              - 'front-end/app/**'
            frontend_mobile:
              - 'front-end/mobile/**'
            java_auth_common:
              - 'java-auth-common/**'
            messages_java:
              - 'messages-java/**'
            user_service:
              - 'user_service/**'
            notifications:
              - 'notifications/**'
            recruiting:
              - 'recruiting/**'
            clash_data:
              - 'clash-data/**'
            workflows:
              - '.github/workflows/**'

  python-lint:
    name: Python lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install ruff
        run: pip install ruff
      - name: Ruff check (coclib, db)
        run: ruff check coclib db

  lambdas-refresh-worker:
    name: Lambda tests (refresh-worker)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.lambdas_refresh_worker == 'true' || needs.changes.outputs.python == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            lambdas/refresh-worker/requirements-test.txt
      - name: Install test deps
        working-directory: lambdas/refresh-worker
        run: pip install -r requirements-test.txt
      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
        working-directory: lambdas/refresh-worker
        run: pytest -q test_lambda_function.py -q

  frontend-app:
    name: Front-end web
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend_app == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: front-end/app/package-lock.json
      - name: Install deps
        working-directory: front-end/app
        run: npm ci
      - name: Run tests
        working-directory: front-end/app
        run: npm test --silent
      - name: Build
        working-directory: front-end/app
        run: npm run build

  frontend-mobile:
    name: Mobile
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend_mobile == 'true' || needs.changes.outputs.workflows == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: front-end/mobile/package-lock.json
      - name: Install deps
        working-directory: front-end/mobile
        run: npm ci
      - name: Run tests
        working-directory: front-end/mobile
        run: npm run test --silent
      - name: Typecheck
        working-directory: front-end/mobile
        run: npm run typecheck
      - name: Lint
        working-directory: front-end/mobile
        run: npm run lint

  java:
    name: Java (${{ matrix.project }})
    runs-on: ubuntu-latest
    needs: changes
    if: >-
      ${{ needs.changes.outputs.java_auth_common == 'true' ||
          needs.changes.outputs.messages_java == 'true' ||
          needs.changes.outputs.user_service == 'true' ||
          needs.changes.outputs.notifications == 'true' ||
          needs.changes.outputs.recruiting == 'true' ||
          needs.changes.outputs.clash_data == 'true' ||
          needs.changes.outputs.workflows == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        project: [ 'java-auth-common', 'messages-java', 'user_service', 'notifications', 'recruiting', 'clash-data' ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Gradle build setup and cache
        uses: gradle/gradle-build-action@v2
      - name: Publish coc-java to Maven Local
        run: |
          cd coc-py
          ./gradlew :coc-java:publishToMavenLocal -Pversion=0.1.0 --no-daemon
      - name: Ensure recruiting wrapper
        if: matrix.project == 'recruiting'
        run: |
          if [ ! -f recruiting/gradle/wrapper/gradle-wrapper.jar ]; then
            ./messages-java/gradlew -p recruiting wrapper
          fi
      - name: Spotless + Tests
        working-directory: ${{ matrix.project }}
        run: ./gradlew --no-daemon spotlessCheck test

  enable-auto-merge:
    name: Enable auto-merge
    runs-on: ubuntu-latest
    needs: [changes, python-lint, lambdas-refresh-worker, frontend-app, frontend-mobile, java]
    steps:
      - name: Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.PR_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
