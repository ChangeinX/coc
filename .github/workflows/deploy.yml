name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types:
      - closed

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      APP_REPOSITORY: ${{ secrets.APP_REPOSITORY }}
      WORKER_REPOSITORY: ${{ secrets.WORKER_REPOSITORY }}
      STATIC_REPOSITORY: ${{ secrets.STATIC_REPOSITORY }}
      FRONTEND_BUCKET: ${{ secrets.FRONTEND_BUCKET }}
      CLUSTER: ${{ secrets.CLUSTER }}
      APP_SERVICE: ${{ secrets.APP_SERVICE }}
      WORKER_SERVICE: ${{ secrets.WORKER_SERVICE }}
      STATIC_SERVICE: ${{ secrets.STATIC_SERVICE }}
      VITE_API_URL: ${{ secrets.VITE_API_URL }}
      VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Detect changes
        id: changes
        uses: tj-actions/changed-files@v41
        with:
          files_yaml: |
            app:
              - front-end/**
            worker:
              - back-end/**
            static:
              - sync/**

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push app image
        if: steps.changes.outputs.app_any_changed == 'true'
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -f front-end/Dockerfile \
            --build-arg VITE_API_URL=$VITE_API_URL \
            --build-arg VITE_GOOGLE_CLIENT_ID=$VITE_GOOGLE_CLIENT_ID \
            -t $ECR_REGISTRY/$APP_REPOSITORY:latest \
            -t $ECR_REGISTRY/$APP_REPOSITORY:${{ github.sha }} \
            --push front-end
          task_def=$(aws ecs describe-services --cluster $CLUSTER --services $APP_SERVICE --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$task_def" --query 'taskDefinition' > taskdef.json
          jq --arg IMAGE "$ECR_REGISTRY/$APP_REPOSITORY:${{ github.sha }}" 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt) | .containerDefinitions[].image=$IMAGE' taskdef.json > new-taskdef.json
          new_def=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER --service $APP_SERVICE --task-definition "$new_def"

      - name: Prep Front End for S3
        if: steps.changes.outputs.app_any_changed == 'true'
        run: |
          npm ci --prefix front-end
          VITE_API_URL=$VITE_API_URL \
          VITE_GOOGLE_CLIENT_ID=$VITE_GOOGLE_CLIENT_ID \
          npm run --prefix front-end build

      - name: Sync front-end to S3
        if: steps.changes.outputs.app_any_changed == 'true'
        run: aws s3 sync front-end/dist s3://$FRONTEND_BUCKET --delete

      - name: Build and push worker image
        if: steps.changes.outputs.worker_any_changed == 'true'
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -f back-end/Dockerfile \
            -t $ECR_REGISTRY/$WORKER_REPOSITORY:latest \
            -t $ECR_REGISTRY/$WORKER_REPOSITORY:${{ github.sha }} \
            --push .
          task_def=$(aws ecs describe-services --cluster $CLUSTER --services $WORKER_SERVICE --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$task_def" --query 'taskDefinition' > taskdef.json
          jq --arg IMAGE "$ECR_REGISTRY/$WORKER_REPOSITORY:${{ github.sha }}" 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt) | .containerDefinitions[].image=$IMAGE' taskdef.json > new-taskdef.json
          new_def=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER --service $WORKER_SERVICE --task-definition "$new_def"

      - name: Build and push static image
        if: steps.changes.outputs.static_any_changed == 'true'
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -f sync/Dockerfile \
            -t $ECR_REGISTRY/$STATIC_REPOSITORY:latest \
            -t $ECR_REGISTRY/$STATIC_REPOSITORY:${{ github.sha }} \
            --push .
          task_def=$(aws ecs describe-services --cluster $CLUSTER --services $STATIC_SERVICE --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$task_def" --query 'taskDefinition' > taskdef.json
          jq --arg IMAGE "$ECR_REGISTRY/$STATIC_REPOSITORY:${{ github.sha }}" 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt) | .containerDefinitions[].image=$IMAGE' taskdef.json > new-taskdef.json
          new_def=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER --service $STATIC_SERVICE --task-definition "$new_def"